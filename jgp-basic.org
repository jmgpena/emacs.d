#+title Basic configuration

* Basic Settings

** Fix PATH on OSX

#+BEGIN_SRC emacs-lisp
  ;; fix the mac PATH variable
  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
  (when (eq system-type 'darwin)
    (when window-system (set-exec-path-from-shell-PATH)))
#+END_SRC

** Defaults

#+BEGIN_SRC emacs-lisp
  ;; locale settings and coding
  (setq system-time-locale "C")
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  ;; set environment coding system
  (set-language-environment "UTF-8")
  ;; auto revert buffer globally
  (global-auto-revert-mode t)
  ;; set TAB and indention
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  ;; y or n is suffice for a yes or no question
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; always add new line to the end of a file
  (setq require-final-newline t)
  ;; add no new lines when "arrow-down key" at the end of a buffer
  (setq next-line-add-newlines nil)
  ;; prevent the annoying beep on errors
  (setq ring-bell-function 'ignore)
  ;; remove trailing whitespaces before save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; enable to support navigate in camelCase words
  (global-subword-mode t)

  ;; shell-mode settings
  (unless (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "/bin/bash")
    (setq shell-file-name "/bin/bash"))
  ;; always insert at the bottom
  (setq comint-scroll-to-bottom-on-input t)
  ;; no duplicates in command history
  (setq comint-input-ignoredups t)
  ;; what to run when i press enter on a line above the current prompt
  (setq comint-get-old-input (lambda () ""))
  ;; max shell history size
  (setq comint-input-ring-size 1000)
  ;; show all in emacs interactive output
  (setenv "PAGER" "cat")
  ;; set lang to enable Chinese display in shell-mode
  (setenv "LANG" "en_US.UTF-8")

  ;; set text-mode as the default major mode, instead of fundamental-mode
  ;; The first of the two lines in parentheses tells Emacs to turn on Text mode
  ;; when you find a file, unless that file should go into some other mode, such
  ;; as C mode.
  (setq-default major-mode 'text-mode)

  ;;; ido-mode
  (setq ido-enable-prefix nil)
  (setq ido-enable-case nil)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)

  ;; use icomplete in minibuffer
  (icomplete-mode t)

  ;; delete the selection with a keypress
  (delete-selection-mode t)
#+END_SRC

* Auto-fill Mode

Automatically break lines at 80 columns.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'prog-mode-hook 'turn-on-auto-fill)
#+END_SRC

* Backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

* Save Place in Opened Files

#+BEGIN_SRC emacs-lisp
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "saved-places"))
  (require 'saveplace)
#+END_SRC

* Recentf

Find recent edited files

#+BEGIN_SRC emacs-lisp
  (require 'recentf)

  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)

  ;; save the .recentf file to .emacs.d/
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))

  ;; enable recent files mode.
  (recentf-mode t)

  ;; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC

* Uniquify

Differentiate buffers with the same file name.

#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (require 'uniquify)
#+END_SRC

* Flyspell

Use aspell instead of ispell

#+BEGIN_SRC emacs-lisp
  ;; use aspell instead of ispell
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
#+END_SRC
