* Introduction
* User and System settings

Set emacs to use utf-8 for everything.

#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
(setq locale-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-selection-coding-system 'utf-8-unix)
;; set environment coding system
(set-language-environment "UTF-8")
#+END_SRC

Set the user name and email address. These are the default
personalization settings for emacs.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jorge Pena"
        user-mail-address "jorge@jmgpena.net")
#+END_SRC

The default directory is a tricky one and I think is only needed for
windows. I need to check this and make sure to only use it when
needed.

#+BEGIN_SRC emacs-lisp
  (setq-default default-directory "~/")
  (cd "~/")
#+END_SRC

Update the default gc threshold to 20MB as it is more in line with
current machines capabilities.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

Save the emacs file backups to the system temporary directory. This
keeps project folders clean from emacs backup files, but we can get
them if there is a need.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

Keep emacs Custom-settings in separate file

#+BEGIN_SRC emacs-lisp
  (let ((custom-file-name (expand-file-name "custom.el" user-emacs-directory)))
    (setq custom-file custom-file-name)
    (when (file-exists-p custom-file-name)
      (load custom-file-name)))
#+END_SRC

Keep history of the last opened buffers using recentf package (bundled
with emacs).

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  ;; save the .recentf file to .emacs.d/
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))
  ;; enable recent files mode.
  (recentf-mode t)
  ;; 1000 files ought to be enough.
  (setq recentf-max-saved-items 1000
        recentf-exclude '("/tmp/" "/ssh:"))
#+END_SRC

* Package Initialization

#+BEGIN_SRC emacs-lisp
  ;; use package.el from emacs
  (require 'package)
  (setq package-check-signature nil)

  ;; Define package archives
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
               '("SC" . "http://joseito.republika.pl/sunrise-commander/"))
  ;; (add-to-list 'package-archives
  ;;             '("marmalade" . "https://marmalade-repo.org/packages/") t)

  ;; If gpg cannot be found, signature checking will fail, so we
  ;; conditionally enable it according to whether gpg is available. We
  ;; re-run this check once $PATH has been configured
  ;; (defun site/package-maybe-enable-signatures ()
  ;;   "Enable package signatures if gpg is present."
  ;;   (setq package-check-signature (when (executable-find "gpg") 'allow-unsigned)))

  ;; (site/package-maybe-enable-signatures)
  ;; (after-load 'init-exec-path
  ;;   (site/package-maybe-enable-signatures))

  ;; initialize package system
  (package-initialize)

  (unless
      (and
       (file-exists-p "~/.emacs.d/elpa/archives/melpa")
       (file-exists-p "~/.emacs.d/elpa/archives/org")
       (file-exists-p "~/.emacs.d/elpa/archives/SC")
       ;; (file-exists-p "~/.emacs.d/elpa/archives/marmalade")
       )
    (package-refresh-contents))

  ;; bootstrap use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
  (require 'use-package)

  ;; paradox package list replacement
  (use-package paradox :ensure t)
  ;; (setq paradox-github-token "08ceb37da5d8e34cfa6d2f74619d7a54fa0e1763"
  ;;       paradox-column-width-package 36)
#+END_SRC

** Hydra

This package helps streamline keybindings for related commands by
using a common prefix and short binding after that.
https://github.com/abo-abo/hydra
Moving it to be loaded early in the config so any other section can define hydras.

#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t)
#+END_SRC

* Gui and Appearence
** Basic appearence

Disable the emacs startup screen and go directly to the scratch
buffer. Also disable the toolbar and scrollbar and other gui features.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq indicate-empty-lines t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme :defer t)
  (load-theme 'base16-tomorrow-dark t)
#+END_SRC

** Window management

Use ace-window to easily move between windows and do some basic manipulations.
https://github.com/abo-abo/ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-dispatch-always nil)
    :config
    (global-set-key (kbd "M-p") 'ace-window))
#+END_SRC

Window movement and manipulation hydra. Lifted from [[http://doc.rix.si/org/fsem.html#sec-8][Hardcore Freestyle Emacs]].

#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame :ensure t)
  (winner-mode 1)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (defhydra hydra-window (global-map "C-x w" :color red :hint nil)
    "
   Split: _v_ert _x_:horz
  Delete: _o_nly  _da_ce  _dw_indow  _db_uffer  _df_rame
    Move: _s_wap
  Frames: _f_rame new  _df_ delete
    Misc: _a_ce  _u_ndo  _r_edo
  Switch: _p_revious _n_ext buffer"
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("H" hydra-move-splitter-left)
    ("J" hydra-move-splitter-down)
    ("K" hydra-move-splitter-up)
    ("L" hydra-move-splitter-right)
    ("|" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("_" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("v" split-window-right)
    ("x" split-window-below)
    ("t" transpose-frame "'")
    ("u" winner-undo)
    ("r" winner-redo)
    ("o" delete-other-windows :exit t)
    ("a" ace-window :exit t)
    ("f" new-frame :exit t)
    ("s" ace-swap-window)
    ("da" ace-delete-window)
    ("dw" delete-window)
    ("db" kill-this-buffer)
    ("df" delete-frame :exit t)
    ("q" nil)
    ("i" ace-maximize-window "ace-one" :color blue)
    ("b" helm-buffers-list)
    ("p" previous-buffer)
    ("n" next-buffer))
#+END_SRC

* Basic packages with global functionality
** Helm

Configure Helm library

#+BEGIN_SRC emacs-lisp
  (use-package helm :ensure t)
  (require 'helm-config)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  ;; See https://github.com/bbatsov/prelude/pull/670 for a detailed
  ;; discussion of these options.
  (setq helm-quick-update                     t
        helm-split-window-in-side-p           t
        helm-buffers-fuzzy-matching           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)

  (use-package helm-descbinds :ensure t)
  (helm-descbinds-mode)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)

  ;; grep in helm
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))

  (define-key helm-command-map (kbd "o")     'helm-occur)
  (define-key helm-command-map (kbd "g")     'helm-do-grep)
  (define-key helm-command-map (kbd "C-c w") 'helm-wikipedia-suggest)
  (define-key helm-command-map (kbd "SPC")   'helm-all-mark-rings)
#+END_SRC

Helm interface to ag: https://github.com/syohex/emacs-helm-ag

#+BEGIN_SRC emacs-lisp
  (use-package ag :ensure t)
  (use-package helm-ag
    :ensure t
    :init
    (setq helm-ag-base-command "ag --nocolor --nogroup --ignore-case"
          helm-ag-command-option "--all-text"
          helm-ag-insert-at-point 'symbol))
#+END_SRC

Also use helm-swoop (https://github.com/ShingoFukuyama/helm-swoop)

#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :ensure t
    :config
    (progn
      (global-set-key (kbd "M-i") 'helm-swoop)
      (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
      (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
      (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
      ;; in isearch, hand the word over to helm-swoop
      (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)))
#+END_SRC

** Smart Mode Line

Better mode line with nice defaults.

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line :ensure t)
  (sml/setup)
  (sml/apply-theme 'light)
#+END_SRC
** Anzu

Improvements on search and replace functionality using the anzu package
https://github.com/syohex/emacs-anzu

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (use-package anzu
      :ensure t
      :config
      (progn
        (global-anzu-mode +1)
        (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
        (global-set-key [remap query-replace] 'anzu-query-replace))))
#+END_SRC

** Dired+ and other dired improvements

Dired+ adds lots of improvements to dired:
http://www.emacswiki.org/emacs/dired+.el

#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t
    :config
    (setq-default diredp-hide-details-initially-flag nil
                  dired-dwim-target t))

  (when (fboundp 'global-dired-hide-details-mode)
    (global-dired-hide-details-mode -1))
  (setq dired-recursive-deletes 'top)
  (define-key dired-mode-map [mouse-2] 'dired-find-file)
  (add-hook 'dired-mode-hook
            (lambda () (guide-key/add-local-guide-key-sequence "%")))
#+END_SRC

* Basic Editing Configuration

Default settings:

#+BEGIN_SRC emacs-lisp
  (setq-default
   cursor-type 'bar
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t                     ; search case insensitive
   line-number-mode t
   column-number-mode t
   make-backup-files nil
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   show-trailing-whitespace t
   next-line-adds-newlines nil
   require-final-newline t
   highlight-tabs t
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil
   visible-bell t
   ring-bell-function 'ignore)
#+END_SRC

Transparently open compressed files:

#+BEGIN_SRC emacs-lisp
  (auto-compression-mode t)
#+END_SRC

Set indentation to 4 and default to spaces instead of tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+END_SRC

Change yes-or-no-p to just y-or-n-p. Having to answer y/s is enough
safety for me.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Highlight parentesis and other delimiters.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

Save the last position in files and remember the next time we open the
same file.

#+BEGIN_SRC emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "saved-places"))
#+END_SRC

Highlight the current line:

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

Cleanup trailin whitespace using this package:
https://github.com/purcell/whitespace-cleanup-mode

#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :config
    (global-whitespace-cleanup-mode t))
#+END_SRC

Activate prettify-symbols-mode if available. You need to add the list
of expressions to prettify in each mode.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'global-prettify-symbols-mode)
    (global-prettify-symbols-mode +1))
#+END_SRC

Expand region is a package that allow to expand the selection in a
logical way depending on the context.
https://github.com/magnars/expand-region.el

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

Change visualization of line breaks from ^L to a neat line.
https://github.com/purcell/page-break-lines

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config
    (global-page-break-lines-mode))
#+END_SRC

Set fill column for text mode.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Highlight escape sequences:
https://github.com/dgutov/highlight-escape-sequences

#+BEGIN_SRC emacs-lisp
  (use-package highlight-escape-sequences
    :ensure t
    :config
    (hes-mode))
#+END_SRC

Guide key mode to help learn keybindings.
https://github.com/kai2nenobu/guide-key

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :ensure t
    :init
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x 5" "C-c ;" "C-c ; f" "C-c ' f" "C-x n" "C-c p" "C-x 8" "C-x v" "C-c h" "C-h")
          guide-key/recursive-key-sequence-flag t
          guide-key/popup-window-position 'bottom)
    :config
    (guide-key-mode 1))
#+END_SRC

Smarter moving to beginning and end of lines. https://github.com/alezost/mwim.el

#+BEGIN_SRC emacs-lisp
  (use-package mwim
    :ensure t
    :config
    (progn
      (global-set-key (kbd "C-a") 'mwim-beginning-of-code-or-line)
      (global-set-key (kbd "C-e") 'mwim-end-of-code-or-line)))
#+END_SRC

Uniquify buffer names

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-separator " • ")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
#+END_SRC

Configure ibuffer to be more friendly

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc :ensure t)

  (defun ibuffer-set-up-preferred-filters ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'filename/process)
      (ibuffer-do-sort-by-filename/process)))

  (add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)

  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; Explicitly require ibuffer-vc to get its column definitions, which
  ;; can't be autoloaded
  (require 'ibuffer-vc)

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)
          (mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))

  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

* Org Mode

Use the latest version of org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-plus-contrib :defer t)
#+END_SRC

Update org to insert elisp blocks more easily. Possibly improve the
default abbreviations later...

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(
          ("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
          ("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
          ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
          ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
          ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
          ("V" "#+BEGIN_VERBATIM\n?\n#+END_VERBATIM" "<verbatim>\n?\n</verbatim>")
          ("c" "#+BEGIN_CENTER\n?\n#+END_CENTER" "<center>\n?\n</center>")
          ("x" "#+BEGIN_LaTeX\n?\n#+END_LaTeX" "<literal style=\"latex\">\n?\n</literal>")
          ("L" "#+LaTeX: " "<literal style=\"latex\">?</literal>")
          ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
          ("H" "#+HTML: " "<literal style=\"html\">?</literal>")
          ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII" "")
          ("A" "#+ASCII: " "")
          ("i" "#+INDEX: ?" "#+INDEX: ?")
          ("I" "#+INCLUDE: %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

Add my personal org files to the agenda list.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-'") 'org-cycle-agenda-files)
  (when (file-exists-p "~/Dropbox/org")
    (setq org-directory "~/Dropbox/org")
    (setq org-default-notes-file (concat org-directory "/wip.org"))
    (setq org-agenda-files '("~/Dropbox/org/wip.org"
                             "~/Dropbox/org/ref.org"
                             "~/Dropbox/org/dailylog.org")))
#+END_SRC

* Programming Support
** Common editing

Use rainbow delimiters to help with balancing parameters.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters :ensure t)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Install lispy to handle s-expression editing in lisp like languages

#+BEGIN_SRC emacs-lisp
  ;; (use-package lispy :ensure t)
#+END_SRC

Default prettify symbols list for lisp modes:

#+BEGIN_SRC emacs-lisp
  (defconst lisp--prettify-symbols-alist
    '(("lambda" . ?\λ)
      (">=" . ?≥)
      ("<=" . ?≤)))
#+END_SRC

Navigate in camel case words.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

Use EditorConfig to have different whitespace and indenting conventions in
different projects: https://github.com/editorconfig/editorconfig-emacs

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig)
#+END_SRC

** Smartparens

Configure smartparens: https://github.com/Fuco1/smartparens

The keybinding configuration uses a hydra for now until I understand the
commands better. The hydra is from: https://github.com/abo-abo/hydra/wiki/Smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))

  (defhydra hydra-learn-sp (:hint nil :columns 4)
    "SmartParens:"
    ;; TODO: Use () and [] - + * | <space>
    ("B" sp-backward-sexp "backward-sexp");; similiar to VIM b
    ("F" sp-forward-sexp "forward-sexp");; similar to VIM f
    ;;
    ("L" sp-backward-down-sexp "backward-down-sexp")
    ("H" sp-backward-up-sexp "backward-up-sexp")
    ;;
    ("k" sp-down-sexp "down-sexp") ; root - towards the root
    ("j" sp-up-sexp "up-sexp")
    ;;
    ("n" sp-next-sexp "next-sexp")
    ("p" sp-previous-sexp "previous-sexp")
    ;; a..z
    ("a" sp-beginning-of-sexp "beginning-of-sexp")
    ("z" sp-end-of-sexp "end-of-sexp")
    ;;
    ("t" sp-transpose-sexp "transpose-sexp")
    ;;
    ("x" sp-delete-char "delete-char")
    ("dw" sp-kill-word "kill-word")
    ;;("ds" sp-kill-symbol ) ;; Prefer kill-sexp
    ("dd" sp-kill-sexp "kill-sexp")
    ;;("yy" sp-copy-sexp ) ;; Don't like it. Pref visual selection
    ;;
    ("S" sp-unwrap-sexp "unwrap-sexp") ;; Strip!
    ;;("wh" sp-backward-unwrap-sexp ) ;; Too similar to above
    ;;
    ("C-h" sp-forward-slurp-sexp "forward-slurp-sexp")
    ("C-l" sp-forward-barf-sexp "forward-barf-sexp")
    ("C-S-h" sp-backward-slurp-sexp "backward-slurp-sexp")
    ("C-S-l" sp-backward-barf-sexp "backward-barf-sexp")
    ;;
    ;;("C-[" (bind (sp-wrap-with-pair "[")) ) ;;FIXME
    ;;("C-(" (bind (sp-wrap-with-pair "(")) )
    ;;
    ("s" sp-splice-sexp )
    ("df" sp-splice-sexp-killing-forward "splice-sexp")
    ("db" sp-splice-sexp-killing-backward "splice-sexp-killing-forward")
    ("da" sp-splice-sexp-killing-around "splice-sexp-killing-forward")
    ;;
    ("C-s" sp-select-next-thing-exchange "select-next-think-exchange")
    ("C-p" sp-select-previous-thing "select-previous-thing")
    ("C-n" sp-select-next-thing "select-next-thing")
    ;;
    ("C-f" sp-forward-symbol "forward-symbol")
    ("C-b" sp-backward-symbol "backward-symbol")
    ;;
    ;;("C-t" sp-prefix-tag-object)
    ;;("H-p" sp-prefix-pair-object)
    ("c" sp-convolute-sexp "convolute-sexp")
    ("g" sp-absorb-sexp "absorb-sexp")
    ("q" sp-emit-sexp "emit-sexp")
    ;;
    (",b" sp-extract-before-sexp "extract-before-sexp")
    (",a" sp-extract-after-sexp "extract-after-sexp")
    ;;
    ("AP" sp-add-to-previous-sexp "add-to-previous-sexp");; Difference to slurp?
    ("AN" sp-add-to-next-sexp "add-to-next-sexp")
    ;;
    ("_" sp-join-sexp "join-sexp") ;;Good
    ("|" sp-split-sexp "split-sexp"))

  (bind-key "C-c s" 'hydra-learn-sp/body)
#+END_SRC

** Projectile

Use the excellent projectile project: http://batsov.com/projectile/

We need to require 'grep for search functionality within projectile to work. It
depends on a variable defined in grep.el

#+BEGIN_SRC emacs-lisp
  (require 'grep)
  (use-package projectile
    :init
    (setq projectile-enable-caching t)
    :config
    (projectile-global-mode))
#+END_SRC

Integrate helm into projectile

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+END_SRC

** Version Control

Add git-gutter+ mode to highlight changes on the files while you are
editing.

Consider using also git-gutter-fringe+ (add indicators on the fringe
instead of buffer margin.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :ensure t
    :config
    (global-git-gutter+-mode t))
#+END_SRC

Magit mode for emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t)
  (global-set-key (kbd "C-x m") 'magit-status)
#+END_SRC

** Flycheck

On the fly sintax checking for various languages:
https://github.com/flycheck/flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook
              (lambda ()
                (global-flycheck-mode +1)
                (add-hook 'prog-mode-hook 'flycheck-mode)))
    ;; Override default flycheck triggers
    (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)
          flycheck-idle-change-delay 0.8
          flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))



#+END_SRC

** Elisp

Use lispy to handle s-expression manipulation.
https://github.com/abo-abo/lispy

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
#+END_SRC

** Markdown

Edit markdown files.
http://melpa.org/#/markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :init
    (progn
      (autoload 'markdown-mode "markdown-mode"
        "Major mode for editing Markdown files" t)
      (add-to-list 'auto-mode-alist '("\\.\\(md\\|markdown\\)\\'" . markdown-mode))
      (setq markdown-command "pandoc -f markdown -t html")))
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
  (use-package php-mode)
#+END_SRC

** HTML

Use web-mode to edit HTML templates and JS and CSS inside HTML.
http://web-mode.org/

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.blade\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist
                 '("/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'" . web-mode)))
#+END_SRC

* System specific settings
** Mac OSX

Setting specific to OSW (darwin)

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setenv "TMPDIR" "/tmp")
    (setq insert-directory-program (executable-find "gls")))
#+END_SRC
